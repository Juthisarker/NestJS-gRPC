version: '3.8'

services:
  product-service:
    build:
      context: ./product-service
      dockerfile: Dockerfile
    container_name: product-service
    ports:
      - "50051:50051"
    environment:
      - DATABASE_HOST=postgres
      - DATABASE_PORT=5432
      - DATABASE_USERNAME=user
      - DATABASE_PASSWORD=password
      - DATABASE_NAME=ecommerce
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - backend

  order-service:
    build:
      context: ./order-service
      dockerfile: Dockerfile
    container_name: order-service
    ports:
      - "50052:50052"
    environment:
      - DATABASE_HOST=postgres
      - DATABASE_PORT=5432
      - DATABASE_USERNAME=user
      - DATABASE_PASSWORD=password
      - DATABASE_NAME=ecommerce
    depends_on:
      postgres:
        condition: service_healthy
      product-service:
        condition: service_started
    networks:
      - backend

  postgres:
    image: postgres:14
    container_name: postgres
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: ecommerce
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d ecommerce"]
      interval: 10s
      retries: 5
      start_period: 10s
      timeout: 5s
    networks:
      - backend

volumes:
  postgres_data:

networks:
  backend:
    driver: bridge
